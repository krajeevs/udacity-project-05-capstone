  
version: 2.1
orbs:
  docker: circleci/docker@1.5.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  
jobs:
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: ls -lart
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get services
            kubectl get nodes
            kubectl get pods
            kubectl apply -f ./deployment.yaml
            kubectl apply -f ./service.yaml
            kubectl get deployment my-frontend
            kubectl rollout restart deployment/my-frontend

            kubectl get services
            kubectl get nodes
            kubectl get pods
            
  create-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            aws cloudformation list-exports > mycf.txt
            mystackcount=`aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE | grep "my-udacity-capstone-demo" | wc -l`
            if [[ $mystackcount -gt 0 ]]
            then
            echo "Exists"
            else
            echo "Not exists"
            eksctl create cluster --name my-udacity-capstone-demo --region us-west-2 --node-type t3.small --nodes 2 --nodes-min 2 --nodes-max 4 --managed
            fi
            
     
            
workflows:
  default:
    jobs:
     - docker/hadolint:
        dockerfiles: ./Dockerfile
        ignore-rules: 'DL4005,DL3008'
     - docker/publish:
        requires: [docker/hadolint]
        image: krajeevs/udacityp05_v1
        tag: latest
     #- aws-eks/delete-cluster:
        #requires: [docker/publish]
        #cluster-name: my-udacity-capstone-demo
     #- aws-eks/create-cluster:
        #requires: [docker/publish]
        #cluster-name: my-udacity-capstone-demo
     - create-eks-cluster:  
     #- test-cluster:
        requires: [docker/publish]
        #requires: [aws-eks/create-cluster]
        cluster-name: my-udacity-capstone-demo
     - aws-eks/delete-cluster:
        requires: [create-eks-cluster]
        #requires: [test-cluster]
        cluster-name: my-udacity-capstone-demo

        
