  
version: 2.1
orbs:
  docker: circleci/docker@1.5.0
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0
  
jobs:
  test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: ls -lart
  deploy-pods:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get services
            kubectl get nodes
            kubectl get pods
            kubectl apply -f ./deployment.yaml
            kubectl apply -f ./service.yaml
            kubectl get deployment my-frontend
            kubectl rollout restart deployment/my-frontend
            sleep 60
            kubectl get services
            kubectl get nodes
            kubectl get pods
            sleep 120
            
  create-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - kubernetes/install
      - run:
          name: Test cluster
          command: |

            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                sudo $PIP install awscli --upgrade
              else
                # This installs the AWS CLI to ~/.local/bin. Make sure that ~/.local/bin is in your $PATH.
                $PIP install awscli --upgrade --user
              fi
            elif [[ $(which unzip curl | wc -l) -eq 2 ]]; then
              cd
              curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
              unzip awscli-bundle.zip
              if which sudo > /dev/null; then
                sudo ~/awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
              else
                # This installs the AWS CLI to the default location (~/.local/lib/aws) and create a symbolic link (symlink) at ~/bin/aws. Make sure that ~/bin is in your $PATH.
                awscli-bundle/install -b ~/bin/aws
              fi
              rm -rf awscli-bundle*
              cd -
            else
              echo "Unable to install AWS CLI. Please install pip."
              exit 1
            fi

            mystackcount=`aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE | grep "<< parameters.cluster-name >>" | wc -l`
            if [[ $mystackcount -gt 0 ]]
            then
            echo "Cluster Found"
            else
            echo "Cluster Not Found"
            eksctl create cluster --name << parameters.cluster-name >> --region us-west-2 --node-type m5.large --nodes 2 --nodes-min 2 --nodes-max 4 --managed
            fi
            
     
            
workflows:
  default:
    jobs:
     - docker/hadolint:
        dockerfiles: ./Dockerfile
        ignore-rules: 'DL4005,DL3008'
     - docker/publish:
        requires: [docker/hadolint]
        image: krajeevs/udacityp05_v1
        tag: latest
     - create-eks-cluster:  
        requires: [docker/publish]
        cluster-name: my-udacity-capstone-demo
     - deploy-pods:
        requires: [create-eks-cluster]
        cluster-name: my-udacity-capstone-demo
     #- aws-eks/delete-cluster:
        #requires: [deploy-pods]
        #cluster-name: my-udacity-capstone-demo
        
     #- aws-eks/delete-cluster:
        #requires: [docker/publish]
        #cluster-name: my-udacity-capstone-demo
     #- aws-eks/create-cluster:
        #requires: [docker/publish]
        #cluster-name: my-udacity-capstone-demo
     #- create-eks-cluster:  
     #- test-cluster:
        #requires: [docker/publish]
        #requires: [aws-eks/create-cluster]
        #cluster-name: my-udacity-capstone-demo
     #- aws-eks/delete-cluster:
        #requires: [create-eks-cluster]
        #requires: [test-cluster]
        #cluster-name: my-udacity-capstone-demo

        
